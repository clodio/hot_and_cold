// /public/index.html
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#000000" />
    <link rel="manifest" href="manifest.json" />
    <link rel="apple-touch-icon" href="icon-192.png" />
    <title>hot_and_cold</title>
  </head>
  <body>
    <noscript>Vous devez activer JavaScript pour utiliser cette application.</noscript>
    <div id="root"></div>
  </body>
</html>

// /public/manifest.json
{
  "name": "hot_and_cold",
  "short_name": "hot_and_cold",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#000000",
  "icons": [
    {
      "src": "icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}

// /public/icon-192.png
// /public/icon-512.png
// (Tu dois placer ici des fichiers PNG aux dimensions 192x192 et 512x512)

// /public/service-worker.js
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open("mot-cache").then((cache) => {
      return cache.addAll(["./", "./index.html", "./bundle.js", "./manifest.json", "./icon-192.png"]);
    })
  );
});

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});

// /src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import HotAndCold from "./hot_and_cold";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <HotAndCold />
  </React.StrictMode>
);

if ("serviceWorker" in navigator) {
  window.addEventListener("load", () => {
    navigator.serviceWorker.register("/service-worker.js");
  });
}

// /src/index.css
body, html, #root {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  font-family: sans-serif;
  touch-action: manipulation;
  user-select: none;
  overflow: hidden;
}

// /src/hot_and_cold.jsx
import React, { useEffect, useState } from "react";

const wordsList = ["ruban", "metro", "oubliettes", "congÃ©s", "maison", "repas"];

function shuffleArray(array) {
  return [...array].sort(() => Math.random() - 0.5);
}

function getRandomBackgroundAndTextColor() {
  const r = Math.floor(Math.random() * 256);
  const g = Math.floor(Math.random() * 256);
  const b = Math.floor(Math.random() * 256);
  const bgColor = `rgb(${r}, ${g}, ${b})`;
  const brightness = (r * 299 + g * 587 + b * 114) / 1000;
  const textColor = brightness > 128 ? "#000" : "#FFF";
  return { bgColor, textColor };
}

export default function MotAfficheMobile() {
  const [words, setWords] = useState([]);
  const [index, setIndex] = useState(0);
  const [bg, setBg] = useState("#FFF");
  const [textColor, setTextColor] = useState("#000");

  useEffect(() => {
    const shuffled = shuffleArray(wordsList);
    setWords(shuffled);
    const { bgColor, textColor } = getRandomBackgroundAndTextColor();
    setBg(bgColor);
    setTextColor(textColor);
  }, []);

  const nextWord = () => {
    const newIndex = (index + 1) % words.length;
    setIndex(newIndex);
    if (newIndex === 0) setWords(shuffleArray(wordsList));
    const { bgColor, textColor } = getRandomBackgroundAndTextColor();
    setBg(bgColor);
    setTextColor(textColor);
  };

  return (
    <div
      onClick={nextWord}
      className="w-screen h-screen flex items-center justify-center text-6xl font-bold"
      style={{ backgroundColor: bg, color: textColor }}
    >
      {words[index]}
    </div>
  );
}

// /package.json
{
  "name": "hot_and_cold",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "scripts": {
    "start": "webpack serve --open",
    "build": "webpack"
  },
  "devDependencies": {
    "webpack": "^5.88.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1",
    "babel-loader": "^9.1.3",
    "@babel/core": "^7.24.0",
    "@babel/preset-env": "^7.24.0",
    "@babel/preset-react": "^7.24.0",
    "css-loader": "^6.8.1",
    "style-loader": "^3.3.4"
  }
}

// /webpack.config.js
const path = require("path");

module.exports = {
  mode: "development",
  entry: "./src/index.js",
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "bundle.js",
    clean: true,
  },
  devServer: {
    static: path.resolve(__dirname, "public"),
    port: 3000,
    open: true,
    hot: true,
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
        },
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
    ],
  },
  resolve: {
    extensions: [".js", ".jsx"],
  },
};

// .babelrc
{
  "presets": ["@babel/preset-env", "@babel/preset-react"]
}
